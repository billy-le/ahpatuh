/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as LoginRouteImport } from './routes/login'
import { Route as FeaturesRouteImport } from './routes/features'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedSettingsRouteImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedServicesRouteImport } from './routes/_authenticated/services'
import { Route as AuthenticatedEmployeesRouteImport } from './routes/_authenticated/employees'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedCalendarRouteImport } from './routes/_authenticated/calendar'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const FeaturesRoute = FeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedSettingsRoute = AuthenticatedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedServicesRoute = AuthenticatedServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedEmployeesRoute = AuthenticatedEmployeesRouteImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedCalendarRoute = AuthenticatedCalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/sign-up': typeof SignUpRoute
  '/calendar': typeof AuthenticatedCalendarRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/employees': typeof AuthenticatedEmployeesRoute
  '/services': typeof AuthenticatedServicesRoute
  '/settings': typeof AuthenticatedSettingsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/sign-up': typeof SignUpRoute
  '/calendar': typeof AuthenticatedCalendarRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/employees': typeof AuthenticatedEmployeesRoute
  '/services': typeof AuthenticatedServicesRoute
  '/settings': typeof AuthenticatedSettingsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/sign-up': typeof SignUpRoute
  '/_authenticated/calendar': typeof AuthenticatedCalendarRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/employees': typeof AuthenticatedEmployeesRoute
  '/_authenticated/services': typeof AuthenticatedServicesRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/features'
    | '/login'
    | '/pricing'
    | '/sign-up'
    | '/calendar'
    | '/dashboard'
    | '/employees'
    | '/services'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/features'
    | '/login'
    | '/pricing'
    | '/sign-up'
    | '/calendar'
    | '/dashboard'
    | '/employees'
    | '/services'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/features'
    | '/login'
    | '/pricing'
    | '/sign-up'
    | '/_authenticated/calendar'
    | '/_authenticated/dashboard'
    | '/_authenticated/employees'
    | '/_authenticated/services'
    | '/_authenticated/settings'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  FeaturesRoute: typeof FeaturesRoute
  LoginRoute: typeof LoginRoute
  PricingRoute: typeof PricingRoute
  SignUpRoute: typeof SignUpRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/features': {
      id: '/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof FeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/services': {
      id: '/_authenticated/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof AuthenticatedServicesRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/employees': {
      id: '/_authenticated/employees'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof AuthenticatedEmployeesRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/calendar': {
      id: '/_authenticated/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof AuthenticatedCalendarRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedCalendarRoute: typeof AuthenticatedCalendarRoute
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedEmployeesRoute: typeof AuthenticatedEmployeesRoute
  AuthenticatedServicesRoute: typeof AuthenticatedServicesRoute
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedCalendarRoute: AuthenticatedCalendarRoute,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedEmployeesRoute: AuthenticatedEmployeesRoute,
  AuthenticatedServicesRoute: AuthenticatedServicesRoute,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  FeaturesRoute: FeaturesRoute,
  LoginRoute: LoginRoute,
  PricingRoute: PricingRoute,
  SignUpRoute: SignUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
